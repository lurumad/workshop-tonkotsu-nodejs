name: ci

on:
  push:
    branches:
      - master
  pull_request:

env:
  DOCKER_IMAGE: ghcr.io/${{ github.repository }}/node-image:${{ github.sha }}

jobs:
  docker:
    name: 'Docker'
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout the repo
        uses: actions/checkout@v2
      -
        name: Log in to the GitHub Docker Registy
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build container image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}
  terraform:
    needs: docker
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      TF_ACTIONS_WORKING_DIR: ./terraform
    defaults:
        run:
          working-directory: ${{ env.TF_ACTIONS_WORKING_DIR }}
    steps:
      - 
        name: Checkout the repo
        uses: actions/checkout@v2
      -
        name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      -
        name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      - 
        name: Terraform Init
        id: init
        run: terraform init
      - 
        name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      -
        name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -var 'docker_image=${{ env.DOCKER_IMAGE }}' -no-color
        continue-on-error: true
      - 
        name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - 
        name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - 
        name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -var 'docker_image=${{ env.DOCKER_IMAGE }}' -auto-approve
